function cycleDetection(waitList) {
  // Done
  
  /* if a cycle exits
   * return a list of transaction in the cycle
   * if no cycle exits
   * return an empty list
  
   * According to the requirements:
   * "We will ensure that when a transaction is waiting, 
   * it will not receive another operation."
   * In the blocking graph, one transaction will only
   * point to one other transaction.
   * But we still use a list to record pointsToTransactions
  
   * Question: Is there any circumstance that, in the blocking graph
   * we will find two cycles?
  
   */
  

  
  // waitList is a List of waiting inputs
  // creat a graph blocking[Transaction, pointsTo[]]
  graph blocking;
  table indgree[Transaction, indgree];
  for (each command in waitList) {
    get T from command;
    get x from command;
    array pointsTo;
    // find the transactions that hold the lock on x;
    for (each transaction in transactionMap) {
      if (transaction == T) {
        continue;
      }
      for (each lock in transaction.locks[]) {
        if (lock.variable == x) {
          pointsTo.push(transaction);
        }
      }
    }
    blocking[T] = pointsTo;
  }
  // detect cycle
  queue myQueue;
  for (each transaction in indgree table) {
    if (indgree[transaction] == 0) {
      myQueue.push(transaction);
      remove transaction from indgree table;
    }
  }
  while (!myQueue.empty()) {
    Transaction T = myQueue.top();
    myQueue.pop();
    for (each pointsToTransaction in blocking[T]) {
      indgree[pointsToTransaction]--;
      if (indgree[pointsToTransaction] == 0) {
        myQueue.push();
        remove pointsToTransaction from indgree table;
      } 
    }
  }
  // return the cycle
  List transactionsInCycle = empty list;
  if (!indgree.empty()) {
    for (each transaction in indgree table) {
      transactionsInCycle.push(transaction);
    }
  }
  return transactionsInCycle;
}

function abort(string T) {
  release T's locks;
  delete T from transactionMap[T, transaction];
  delete T from waitList;
  delete T from transactionAge;
}

function begin(string T) {
  Transaction T_new = new Transaction(false);
  transactionMap[T] = T_new;
  transactionAge.push(T_new);
}

function beginRO(string T) {
  Transaction T_new = new Transaction(false);
  transactionMap[T] = T_new;
  multiVersion[latesetVersionNumber].involvedTransaction.push(T_new);
}

function transactionExists(T) {
  transactionNumber = toInt(T.substring(1));
  if (transactionMap[transactionNumber] not found) {
    // this transaction hasn't begin
    // ignore this instruction
    return false;
  }
  return true;
}

function R(string T, string x) {
  if (!transactionExists(T)) {
    return;
  }
  
  transactionNumber = toInt(T.substring(1));
  T = transactionMap[transactionNumber];
  
  if (T.versionNumber != -1) {
    // if T is a read-only transaction
    // then T doesn't needs locks
    choose an available site;
    if (an site is available) {
      Version versionT = multiVersion[T.versionNumber];
      History h = new History("read", sites[{available site}], x, versionT.variables[x]);
      T.history.push(h);
    }
    else {
      push this_command into waitListAppend;
    }
    return;
  }
  
  if (T is not a read-only transaction i.e. T.versionNumber == -1) {
    // acquire read lock on x
    bool getLock = false;
    // if a transaction older than T
    // requires a write lock on x in the waitList
    // then T can't get read lock on x
    for (each transaction in waitList) {
      if (transaction needs a write lock on x) {
        getLock = false;
        break;
      }
    }
    // if x is write locked
    // then T can't get read lock on x
    if (x is write locked) {
      getLock = false;
    }
    // if every site containing x is down
    // then T can't get read lock on x
    if (every site containing x is down) {
      getLock = false;
    }
    if (!getLock) {
      push this_command into waitListAppend;
    }
    else if (getLock) {
      if (x.variableNumber is odd) {
        siteNumber = 1 + x.variableNumber mod 10;
        if (x.values[siteNumber][1]) {
          array sites[] = {siteNumber};
          History h = new History("read", sites, x, x.value on siteNumber);
          T.history.push(h);
          Lock lock = new Lock(x, "read");
          x.readLock++;
          T.locks.push(lock);
          return;
        }
      }
      if (x.variableNumber is even) {
        for (int i = 1; i <= 10; i++) {
          if (site[i] is avaialbe) {
            array sites[] = {i};
            History h = new History("read", sites, x, x.value on site[i]);
            T.history.push(h);
            Lock lock = new Lock(x, "read");
            x.readLock++;
            T.locks.push(lock);
            return;
          }
        }
      }
      print("all sites contains x are failed");
    }
    return;
  }
}

funtion W(string T, string x, int v) {
  if (!transactionExists(T)) {
    return;
  }
  
  
  transactionNumber = toInt(T.substring(1));
  T = transactionMap[transactionNumber];

  bool getLock = false;
  for (each transaction in waitList) {
    if (transaction needs a read lock or write lock on x) {
      getLock = false;
      break;
    }
  }
  for (each transaction in transactionMap) {
    if (transaction == T) {
      // transaction read a value and can
      // later write to the same value
      continue;
    }
    if (transaction.locks[] contains writeLock on x ||
        transaction.locks[] contains readLock on x) {
      getLock = false;
    }
  }
  // if every site containing x is down
  // then T can't get read lock on x
  if (every site containing x is down) {
    getLock = false;
  }
  if (!getLock) {
    push this_command into waitListAppend;
  }
  else if (get Lock) {
    if (x.variableNumber is odd) {
      siteNumber = 1 + x.variableNumber mod 10;
      if (x.values[siteNumber][1]) {
        array sites[] = {siteNumber};
        Lock lock = new Lock(x, "write");
        x.writeLock on site[i] = true;
        T.locks.push(lock);
        History h = new History("write", sites, x, x.value on site[i]);
        T.history.push(h);
        return;
      }
    }
    if (x.variableNumber is even) {
      for (int i = 1; i <= 10; i++) {
        array sites[];
        if (site[i] is available && x on site[i] canRead) {
          sites.push(i);
          Lock lock = new Lock(x, "write");
          x.writeLock on site[i] = true;
          T.locks.push(lock);
        }
      }
      History h = new History("write", sites, x, x.value on site[i]);
      T.history.push(h);
      return;
    }
    print("all sites contains x are failed");
  }
  return;
}

function dump() {
  print database;
}

function dumpSite(i) {
  use siteMap to get the variable s;
  s.print();
}

function dumpVariable(x) {
  use variableMap to get the variable x;
  x.print();
}

function cleanVersion(multiVersion) {
  array removeList;
  for (each v in multiVersion) {
    // v[0] is versionNumber, v[1] is version
    if (v[1].involvedTransaction.size == 0) {
      removeList.append(v[0]);
    }
  }
  for (each number in removeList) {
    remove multiVersion[number];
  }
}

function end(T) {
  if (!transactionExists(T)) {
    return;
  }
  
  // if T is a read-only transaction
  if (T.versionNumber != -1) {
    multiVersion[T.versionNumber].involvedtransactions.pop(T);
    cleanVersion(multiVersion);
    return;
  }
  // only commit to available sites
  // !!!!!! modify canRead
  for (each v in writeVariables) {
    Varibale x = variableMap[v.name];
    for (each element in x.values) {
      if (siteMap["s" + toInt(element[0])].available) {
        element[1][0] = v.value; // pair(value, canRead)
        element[1][1] = true; // pair(value, canRead)
      }
    }
  }
  // update version
  latestVersionNumber++;
  hashmap v[] = {"x1": x1, "x2": x2, ... , "x20": x20};
  Version v = new Version(latestVersionNumber, v[]);
  multiVersion[latestVersionNumber].push(v);
  // release T's locks
  for (each lock in locks[]) {
    if (lock.type == "read") {
      x.readLock = x.readLock - 1;
    }
    if (lock.type == "write") {
      x.writeLock = false;
    }
  }
  delete T from transactionMap[transactionNumber, transaction];
  delete T from waitList;
  delete T from transactionAge;
}

function fail(site) {
  Site s = siteMap[site];
  for (each x in variables) {
    set canRead to false;
    set readLock to 0;
    set writeLock to false;
  }
  for (each transaction in site.involvedTransactions[]) {
    abort(transaction);
  }
  s.available = false;
  site.involvedTransactions[].clear();
}

function recover(site) {
  Site s = siteMap[site];
  for (each x in variables) {
    if (x is odd number) {
      canRead = true;
    }
  }
  s.available = true;
}
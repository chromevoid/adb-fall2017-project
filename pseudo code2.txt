class VariableInfo {
  member:
    int value;
    boolean canRead = true;
    int readLock = 0;
    boolean writeLock = false;  
  
  function init(v) {
    value = v;
  }
}

class Variable {
  member:
    int variableNumber
    hashmap values[siteNumber, VariableInfo];

  function init(n) {
    variableNumber = n;
    value = 10 * n;
    if (n is odd) {
      int siteNumber = 1 + n mod 10;
      VariableInfo vi = new VariableInfo(value);
      values[siteNumber] = vi;
    }
    else if (n is even) {
      for (int i = 1; i <= 10; i++) {
        VariableInfo vi = new VariableInfo(value);
        values[i] = vi;
      }
    }
  }
  
  function print() {
    for (each element in hashmap) {
      print ("x" + variableNumber + "." + element[0] + 
             "=" + elememt[1][0]); // element[1][0] is the value
    }
  }
}

class Site {
  // Todo!!!! add a touch table as a new member. Use set
  member:
    int siteNumber;
    array variables[];
    bool available = True;

  function init(n, v[]) {
    siteNumber = n;
    variables[] = v[];
    // e.g.
    // s2[] = [x1, x11, x2, x4, x6, x8, x10];
  }
  
  function print() {
    for (each x in variables[]) {
      print ("x" + x.variableNumber + "." + siteNumber +
             " = " + x.values[siteNumber][0]);
      // values[siteNumber] is a pair (value, canRead)
    }
  }
}

class Database {
  member:
    array sites[];
  
  function init(s[]) {
    sites[] = s;
    // e.g.
    // sites[] = [1, 2, .. , 10];
  }
  
  function print() {
    for (each site in sites) {
      print ("site" + site.siteNumber + ": ");
      site.print();
    }
  }
}

class Lock {
  member:
    string variable;
    int siteNumber
    string type; // write or read
  
  function init(v, t) {
    variable = v;
    type = t;
  }
}

class Version {
  member:
    // the number of the version
    int versionNumber;
    // the value of the variables in this version
    hashmap variables[];
    // read-only transactions that are using this version
    array involvedTransaction[];
  
  function init(v[]) {
    versionNumber = latesetVersionNumber;
    variables[] = v[];
  }
}

class History {
  memeber:
    stirng type; // type = "read" or "write"
    array sites[]; // sites that read from or write to
    string variableName; // the name of the variable that is read or written
    int value; // the value that is read or written
  
  function init(t, s, n, v) {
    type = t;
    sties = s;
    variableName = n;
    value = v;
  }
}

class Transaction {
  member:
    // the locks held by transaction
    array locks[];
    // successful executed commands
    queue[History] history;
    // for read-only transaction, -1 by default
    int versionNumber = -1;
  
  function init(isReadOnly) {
    if (isReadOnly) {
      versionNumber = latestVersionNumber;
    }
  }
}

function runTest(file) {    
  create variables x1~x20;
  create site s1~s10;
  create variableMap = { 'x1': x1, 'x2': x2, ... };
  create siteMap = { 's1': s1, 's2': s2, ... }
  create database;
  create multiVersion[versionNumber, version];
  create int latestVersionNumber = 0;
  create version(10, 20, 30, ... , 200);
  create hashmap transactionMap[transactionString, transaction];
  create array waitList[string: command];
  create array transactionAge[transaction number];

  for (each newline in the file) {
    // cycle detection
    if (waitList.size > 1) {
      list result = cycleDetection(waitList);
      // if find a cycle
      // then abort the youngest transaction
      if (result) {
        use transactionAge table to find
          the youngest transaction T in the result;
        abort(T);
      }
    }
    
    create array waitListNew[transaction number];
    
    // execute accumulate input commands
    for (each command in the waitList) {
      // execute corresponding function;
      string functionName = command.split("(")(0)
      switch (functionName) {
        case "R": 
        case "W":
        case "recover": 
        case "dump": {
          string parameter = command.split("(")(1).split(")")(0);
          if (parameter.size == 0) {
            dump();
          }
          else if (parameter[0] != "x") {
            dumpSite(parameter)
          }
          else if (parameter[0] == "x") {

          }
        }
      }
      if (execute failed) {
        waitListNew.push(command);
      }
    }
    
    // execute input commands
    for (each command in the line) {
      // execute corresponding function;
      string functionName = command.split("(")(0)
      switch (functionName) {
        case "R": 
        case "W":
        case "recover": 
        case "dump": {
          string parameter = command.split("(")(1).split(")")(0);
          if (parameter.size == 0) {
            dump();
          }
          else if (parameter[0] != "x") {
            dumpSite(parameter)
          }
          else if (parameter[0] == "x") {

          }
        }
      }
      if (execute failed) {
        waitListNew.push(command);
      }
    }
    waitList = waitListNew;
  }
  return;
}

main {
  runTest(file);
}
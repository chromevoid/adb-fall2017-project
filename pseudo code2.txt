class Variable {
  member:
    int variableNumber
    hashmap values[siteNumber, pair(value, canRead)];
    int readLock = 0;
    bool writeLock = False;

  function init(n) {
    variableNumber = n;
    value = 10 * n;
    if (n is odd) {
      siteNumber = (n + 1) mod 10;
      values[siteNumber] = (value, True);
    }
    else if (n is even) {
      for (int i = 1; i <= 10; i++) {
        values[i] = (value, True);
      }
    }
  }
  
  function print() {
    for (each element in hashmap) {
      print ("x" + variableNumber + "." + element[0] + 
             "=" + elememt[1][0]); // element[1][0] is the value
    }
  }
}

class Site {
  member:
    int siteNumber;
    array variables[];
    bool available = True;

  function init(n, v[]) {
    siteNumber = n;
    variables[] = v[];
    // e.g.
    // s2[] = [x1, x11, x2, x4, x6, x8, x10];
  }
  
  function print() {
    for (each x in variables[]) {
      print ("x" + x.variableNumber + "." + siteNumber +
             " = " + x.values[siteNumber][0]);
      // values[siteNumber] is a pair (value, canRead)
    }
  }
}

class Database {
  member:
    array sites[];
  
  function init(s[]) {
    sites[] = s;
    // e.g.
    // sites[] = [s1, s2, .. , s10];
  }
  
  function print() {
    for (each site in sites) {
      print ("site" + site.siteNumber + ": ");
      site.print();
    }
  }
}

class Transaction {
  member:
    array locks[];
    array writeVariables[name][value];
}

function runTest(file) {    
  create variables x1~x20;
  create variableMap = { 'x1': x1, 'x2': x2, ... };
  create site s1~s10;
  create siteMap = { 's1': s1, 's2': s2, ... }
  create database;
  create array multiVersion[version number][variable number];
  create array waitList[transaction number];
  create array transactionAge[transaction number];

  for (each newline in the file) {
    // cycle detection
    if (waitList.size > 1) {
      list result = cycleDetection(waitList);
      // if find a cycle
      // then abort the youngest transaction
      if (result) {
        use transactionAge table to find
          the youngest transaction T in the result;
        abort(T);
      }
    }
    create array waitListAppend[transaction number];
    // execute input commands
    for (each command in the line) {
      execute corresponding function;
      if (execute fail) {
        waitListAppend.push(command);
      }
    }
    // execute accumulate input commands
    // be careful with read locks
    // if the order is T1 and T2
    // and T1 wants a write lock on x, T2 wants a read lock on x
    // then we can't skip T1 and give T2 the read lock
    for (each command in the waitList) {
      execute corresponding function;
      if (execute success) {
        delete command from waitList;
      }
    }
    waitList.append(waitListAppend);
  }
  return;
}

main {
  runTest(file);
}